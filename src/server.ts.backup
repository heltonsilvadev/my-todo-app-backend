import { Hono } from 'hono'
import { serve } from '@hono/node-server'
import { cors } from 'hono/cors' // Corrigido: importar diretamente de hono/cors

const app = new Hono()

// Habilita CORS para todas as rotas
app.use('/*', cors({
  origin: ['http://localhost:5173'], // Ajuste para a URL do seu frontend
  allowMethods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowHeaders: ['Content-Type']
}))

// Nosso "banco de dados" temporário
let tasks = [
  { id: 1, task: 'Escovar os dentes' },
  { id: 2, task: 'Estudar Vue.js' }
]

// Rota para listar tarefas
app.get('/api/todos', (c) => {
  return c.json({ success: true, data: tasks })
})

// Rota para adicionar tarefa
app.post('/api/todos', async (c) => {
  try {
    const body = await c.req.json()
    
    // Validação básica
    if (!body.task || typeof body.task !== 'string' || body.task.trim() === '') {
      return c.json({ 
        success: false, 
        error: 'O campo "task" é obrigatório e deve ser uma string não vazia' 
      }, 400)
    }
    
    const newTask = { 
      id: Date.now(), 
      task: body.task.trim(),
      completed: false,
      createdAt: new Date().toISOString()
    }
    
    tasks.push(newTask)
    return c.json({ success: true, data: newTask }, 201)
    
  } catch (error) {
    return c.json({ 
      success: false, 
      error: 'Erro ao processar a requisição' 
    }, 400)
  }
})

// Rota para atualizar tarefa
app.put('/api/todos/:id', async (c) => {
  try {
    const id = parseInt(c.req.param('id'))
    const body = await c.req.json()
    
    const taskIndex = tasks.findIndex(task => task.id === id)
    
    if (taskIndex === -1) {
      return c.json({ 
        success: false, 
        error: 'Tarefa não encontrada' 
      }, 404)
    }
    
    // Atualiza apenas os campos fornecidos
    if (body.task !== undefined) {
      if (typeof body.task !== 'string' || body.task.trim() === '') {
        return c.json({ 
          success: false, 
          error: 'O campo "task" deve ser uma string não vazia' 
        }, 400)
      }
      tasks[taskIndex].task = body.task.trim()
    }
    
    if (body.completed !== undefined) {
      tasks[taskIndex].completed = Boolean(body.completed)
    }
    
    return c.json({ success: true, data: tasks[taskIndex] })
    
  } catch (error) {
    return c.json({ 
      success: false, 
      error: 'Erro ao processar a requisição' 
    }, 400)
  }
})

// Rota para deletar tarefa
app.delete('/api/todos/:id', (c) => {
  try {
    const id = parseInt(c.req.param('id'))
    const taskIndex = tasks.findIndex(task => task.id === id)
    
    if (taskIndex === -1) {
      return c.json({ 
        success: false, 
        error: 'Tarefa não encontrada' 
      }, 404)
    }
    
    const deletedTask = tasks.splice(taskIndex, 1)[0]
    return c.json({ success: true, data: deletedTask })
    
  } catch (error) {
    return c.json({ 
      success: false, 
      error: 'Erro ao processar a requisição' 
    }, 400)
  }
})

// Rota para obter uma tarefa específica
app.get('/api/todos/:id', (c) => {
  try {
    const id = parseInt(c.req.param('id'))
    const task = tasks.find(task => task.id === id)
    
    if (!task) {
      return c.json({ 
        success: false, 
        error: 'Tarefa não encontrada' 
      }, 404)
    }
    
    return c.json({ success: true, data: task })
    
  } catch (error) {
    return c.json({ 
      success: false, 
      error: 'Erro ao processar a requisição' 
    }, 400)
  }
})

// Inicia o servidor na porta 3000
serve({
  fetch: app.fetch,
  port: 3000
}, (info) => {
  console.log(`Servidor rodando em http://localhost:${info.port}`)
  console.log(`Rotas disponíveis:`)
  console.log(`  GET    /api/todos      - Listar todas as tarefas`)
  console.log(`  POST   /api/todos      - Adicionar nova tarefa`)
  console.log(`  GET    /api/todos/:id  - Obter tarefa específica`)
  console.log(`  PUT    /api/todos/:id  - Atualizar tarefa`)
  console.log(`  DELETE /api/todos/:id  - Deletar tarefa`)
})